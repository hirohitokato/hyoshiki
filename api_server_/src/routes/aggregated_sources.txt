
########## contents.routes.ts ##########
import { Request, Response, Router } from "express";
import { validationResult } from "express-validator";
import { validateContentIdInParam } from "../validators/contentValidators.js";
import { repository } from "../repositories/index.js";

const router = Router();

/**
 * GET /api/contents
 * - コンテンツのダイジェスト一覧を返す
 */
router.get("/", (req: Request, res: Response) => {
    // 内容をすべてダイジェスト化し返す
    const contentsDigest = Object.entries(repository.contents).map((
        [_, c],
    ) => ({
        id: c.id,
        content_name: c.content_name,
        app_type: c.app_type,
        memo: c.memo,
    }));
    res.json(contentsDigest);
});

/**
 * GET /api/contents/:content_id
 * - 指定したIDのコンテンツ詳細情報を返す
 */
router.get(
    "/:content_id",
    validateContentIdInParam(),
    (req: Request, res: Response) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            // バリデーションエラー（content_idが無効）
            res.status(404).json({
                error: "content_id is invalid or not found",
            });
            return;
        }
        const { content_id } = req.params;
        const content = repository.contents[content_id];
        if (!content) {
            res.status(404).json({ error: "Content not found" });
            return;
        }
        res.json(content);
        return;
    },
);

export default router;


########## images.routes.ts ##########
import { NextFunction, Request, Response, Router } from "express";
import { validationResult } from "express-validator";
import { validateContentIdInQueryParam } from "../validators/contentValidators.js";
import { fetchData, getMediaList } from "../services/mediaService.js";

const router = Router();

/**
 * GET /api/images
 * - 画像リストを返す（content_id がクエリにあれば、そのコンテンツに紐づくものだけ）
 */
router.get(
    "/",
    validateContentIdInQueryParam(),
    (req: Request, res: Response, next: NextFunction) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            res.status(404).json({ error: "content_id is not found" });
            return;
        }

        const { content_id } = req.query as { content_id?: string };
        const elements = getMediaList("image", content_id);
        res.json(elements);
    },
);

/**
 * GET /api/images/:image_id
 * - 個別の画像データを Base64化して返す
 */
router.get("/:image_id", async (req: Request, res: Response) => {
    const { image_id } = req.params;
    const data = await fetchData(image_id);
    if (!data) {
        res.status(404).json({ error: "Image not found" });
        return;
    }
    res.json(data);
});

export default router;


########## index.ts ##########
/**
 * すべてのルーティングを集約して、/api/ 配下に紐づける
 */
import { Express } from "express";
import contentsRouter from "./contents.routes.js";
import randomRouter from "./random.routes.js";
import imagesRouter from "./images.routes.js";
import textRouter from "./text.routes.js";
import soundsRouter from "./sounds.routes.js";

export function registerRoutes(app: Express) {
    // /api/:media_type/random
    app.use("/api", randomRouter);
    app.use("/api/contents", contentsRouter);
    app.use("/api/images", imagesRouter);
    app.use("/api/text", textRouter);
    app.use("/api/sounds", soundsRouter);
}


########## random.routes.ts ##########
/**
 * メディアタイプをURLパラメータで指定し、ランダムに１件取得
 * - /api/:media_type/random
 */
import { Request, Response, Router } from "express";
import { validationResult } from "express-validator";
import { validateContentIdInQueryParam } from "../validators/contentValidators.js";
import {
    fetchData,
    getMediaList,
    resolveMediaType,
} from "../services/mediaService.js";

const router = Router();

router.get(
    "/:media_type/random/",
    // validateContentIdInQueryParam(),
    async (req: Request, res: Response) => {
        // const errors = validationResult(req);
        // if (!errors.isEmpty()) {
        //     res.status(404).json({ error: "content_id is not found" });
        //     return;
        // }

        const { media_type } = req.params;
        const media = resolveMediaType(media_type);
        if (!media) {
            res.status(404).json({
                error:
                    `the specified media_type(${media_type}) is not supported`,
            });
            return;
        }

        const content_id = req.query.content_id as string | undefined;
        const elements = getMediaList(media, content_id);
        if (elements.length === 0) {
            res.status(404).json({
                error:
                    `the specified media_type(${media_type}) does not exist.`,
            });
            return;
        }

        // ランダムに1件選択
        const randomIndex = Math.floor(Math.random() * elements.length);
        const picked = elements[randomIndex] as any; // { id, content_id, ... }

        // そのIDの実データを取得
        const data = await fetchData(picked.id);
        if (!data) {
            res.status(404).json({
                error: `Failed to fetch media data for id=${picked.id}`,
            });
            return;
        }

        res.json(data);
    },
);

export default router;


########## sounds.routes.ts ##########
import { Request, Response, Router } from "express";
import { validationResult } from "express-validator";
import { validateContentIdInQueryParam } from "../validators/contentValidators.js";
import { fetchData, getMediaList } from "../services/mediaService.js";

const router = Router();

/**
 * GET /api/sounds
 * - サウンドリストを返す（content_id がクエリにあれば、そのコンテンツに紐づくものだけ）
 */
router.get(
    "/",
    validateContentIdInQueryParam(),
    (req: Request, res: Response) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            res.status(404).json({ error: "content_id is not found" });
            return;
        }

        const { content_id } = req.query as { content_id?: string };
        const elements = getMediaList("sound", content_id);
        res.json(elements);
    },
);

/**
 * GET /api/sounds/:sound_id
 * - 個別のサウンドデータを Base64化して返す
 */
router.get("/:sound_id", async (req: Request, res: Response) => {
    const { sound_id } = req.params;
    const data = await fetchData(sound_id);
    if (!data) {
        res.status(404).json({ error: "Sound not found" });
        return;
    }
    res.json(data);
});

export default router;


########## text.routes.ts ##########
import { Request, Response, Router } from "express";
import { validationResult } from "express-validator";
import { validateContentIdInQueryParam } from "../validators/contentValidators.js";
import { fetchData, getMediaList } from "../services/mediaService.js";

const router = Router();

/**
 * GET /api/text
 * - テキストリストを返す（content_id がクエリにあれば、そのコンテンツに紐づくものだけ）
 */
router.get(
    "/",
    validateContentIdInQueryParam(),
    (req: Request, res: Response) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            res.status(404).json({ error: "content_id is not found" });
            return;
        }

        const { content_id } = req.query as { content_id?: string };
        const elements = getMediaList("text", content_id);
        res.json(elements);
    },
);

/**
 * GET /api/text/:text_id
 * - 個別のテキストデータを Base64化して返す
 */
router.get("/:text_id", async (req: Request, res: Response) => {
    const { text_id } = req.params;
    const data = await fetchData(text_id);
    if (!data) {
        res.status(404).json({ error: "Text not found" });
        return;
    }
    res.json(data);
});

export default router;

